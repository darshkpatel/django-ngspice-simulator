{"version":3,"sources":["components/navbar.js","components/uploadBox.js","components/uploadCard.js","components/resultCard.js","App.js","serviceWorker.js","index.js"],"names":["FullNavBar","props","toggleNavbar","bind","state","collapseOpen","this","setState","type","theme","expand","href","onClick","open","navbar","React","Component","UploadBox","getUploadParams","meta","url","handleChangeStatus","status","file","console","log","handleSubmit","files","allFiles","forEach","xhr","task_id","JSON","parse","StartTask","updateMainState","map","name","responseText","files_set","file_id","TaskID","XMLHttpRequest","responseType","send","className","onChangeStatus","onSubmit","UploadCard","ResultCard","toggle","collapse","pollResult","timer","setInterval","getItems","fetch","jobDetails","fileID","then","result","json","id","_handleDelete","details","clearInterval","parent","prefix","fileName","aria-label","aria-hidden","style","justifyContent","flexDirection","alignItems","outline","size","length","path","key","src","alt","App","showResultCard","delete","prevState","filter","resultCards","padding","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b6880a95.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./css/navbar.css\"\nimport {\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  Collapse\n} from \"shards-react\";\n\nclass FullNavBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleNavbar = this.toggleNavbar.bind(this);\n\n    this.state = {\n      collapseOpen: false\n    };\n  }\n\n\n  toggleNavbar() {\n    this.setState({\n      ...this.state,\n      ...{\n        collapseOpen: !this.state.collapseOpen\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Navbar type=\"dark\" theme=\"primary\" expand=\"md\">\n        <NavbarBrand href=\"#\">ngSpice Cloud</NavbarBrand>\n        <NavbarToggler onClick={this.toggleNavbar} />\n\n        <Collapse open={this.state.collapseOpen} navbar>\n          <Nav navbar>\n\n\n\n          </Nav>\n\n\n        </Collapse>\n      </Navbar>\n    );\n  }\n}\n\nexport default FullNavBar;","// import 'react-dropzone-uploader/dist/styles.css'\nimport './css/uploadBox.css';\nimport Dropzone from 'react-dropzone-uploader'\nimport React, { Component } from 'react';\n\nclass UploadBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { 'files': [] }\n    // specify upload params and url for your files\n    this.getUploadParams = ({ meta }) => { return { url: 'http://localhost:8000/api/uploads/' } }\n\n    // called every time a file's `status` changes\n    this.handleChangeStatus = ({ meta, file }, status) => { console.log(status, meta, file) }\n\n    // receives array of files that are done uploading when submit button is clicked\n    this.handleSubmit = (files, allFiles) => {\n      // console.log(files.map(f => f.xhr))\n\n      files.forEach(file => {\n        console.log(file.xhr)\n        var task_id = JSON.parse(file.xhr['responseText'])['task_id'];\n        console.log('Sending Start Request: ', task_id)\n        this.StartTask(task_id);\n      })\n      files.forEach(file => { console.log(file) })\n      this.props.updateMainState({\n        'showResultCard': true, 'files': files.map(file => {\n          return {\n            'fileName': file.meta.name,\n            'fileID': JSON.parse(file.xhr.responseText).files_set[0].file_id,\n            'response': JSON.parse(file.xhr.responseText)\n          }\n        })\n      })\n      // allFiles.forEach(f => f.remove())\n    }\n    console.log(props)\n\n    this.StartTask = (TaskID) => {\n      var xhr = new XMLHttpRequest()\n      xhr.responseType = 'json';\n      xhr.open('GET', 'http://localhost:8000/api/task/' + TaskID + '/start', true);\n\n      // const self = this;\n      // xhr.onload = function () {\n      //   var jsonResponse = xhr.response;\n      //   //  self.setState({'files':newFiles})\n      //   //  self.props.updateMainState({'showResultCard': true, 'files':self.state.files})\n\n\n      // };\n      xhr.send()\n      console.log('Sent Request for ', TaskID)\n    }\n  }\n\n\n\n\n  render() {\n    return (\n\n      <div className=\"\">\n        <Dropzone\n          getUploadParams={this.getUploadParams}\n          onChangeStatus={this.handleChangeStatus}\n          onSubmit={this.handleSubmit}\n          className=\"dropzone\"\n        />\n      </div>\n    )\n  }\n}\nexport default UploadBox;","import React from 'react';\nimport {\n    Card,\n    CardHeader,\n    CardBody,\n} from \"shards-react\";\nimport './css/uploadCard.css';\nimport { Container, Row } from \"shards-react\";\nimport UploadBox from \"./uploadBox.js\"\n\nclass UploadCard extends React.Component {\n    render() {\n        return (\n            <Card className=\"cardStyle\">\n                <CardHeader>Upload Netlist for Circuit</CardHeader>\n                <CardBody className=\"cardBodyStyle\">\n                    <Container>\n\n                        <Row>\n                        </Row>\n                        <UploadBox updateMainState={this.props.updateMainState}/>\n                        <Row>\n\n                        </Row>\n                    </Container>\n                </CardBody>\n            </Card>\n\n        );\n\n\n\n\n    }\n}\n\nexport default UploadCard;","import React from 'react';\nimport {\n    Card,\n    CardHeader,\n    CardBody,\n} from \"shards-react\";\nimport './css/resultCard.css';\nimport { Collapse, Container, Row, Button } from \"shards-react\";\nimport SimpleStorage from \"react-simple-storage\";\nclass ResultCard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.toggle = this.toggle.bind(this);\n\n        this.state = { collapse: false, pollResult: { 'state': 'UNFETCHED', 'details': [] } }\n    }\n    toggle() {\n        this.setState({ collapse: !this.state.collapse });\n    }\n    componentDidMount() {\n        this.timer = setInterval(() => this.getItems(), 1000);\n    }\n\n    componentWillUnmount() {\n        this.timer = null; // here...\n    }\n\n    getItems() {\n        fetch('http://localhost:8000/api/celery/' + this.props.jobDetails.fileID)\n            .then(result => result.json())\n            .then(result => this.setState({ pollResult: result }))\n    }\n    _handleDelete(id){\n        this.props._handleDelete(id);\n    }\n    render() {\n        console.log('result card: ', this.props.jobDetails)\n        console.log('Poll Result State: ', this.state)\n\n        let status = 'Waiting to Fetch'\n\n        switch (this.state.pollResult.state) {\n            case 'UNFETCHED': status = 'Waiting to Fetch'; break;\n            case 'SUCCESS': status = (this.state.pollResult.details[0] == null) ? 'Error Processing File' : 'Completed Processing'; clearInterval(this.timer); break;\n            case 'PENDING': status = 'Processing Pending'; break;\n            default: status = 'Error Occured'; clearInterval(this.timer); console.log('state:', this.state.pollResult); break;\n        }\n        return (\n            <Card className=\"cardStyle\" >\n                <SimpleStorage parent={this} prefix={this.props.jobDetails.fileID} />\n\n                <CardHeader>\n                    <span>Results for <strong>{this.props.jobDetails.fileName}</strong></span>\n                    <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={this._handleDelete.bind(this, this.props.jobDetails.fileID)}>\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                </CardHeader>\n                <CardBody className=\"cardBodyStyle cardContainer\">\n                    <Container className=\"\">\n                        <Row style={{ justifyContent: \"space-between\", flexDirection: 'row', alignItems: 'stretch' }}>\n                            <h5>Status:</h5><strong>{status}</strong> {'\\u00A0'}{'\\u00A0'}\n                            {this.state.pollResult.state === 'SUCCESS' &&\n                                <Button outline size='sm' onClick={this.toggle} >Show Output</Button>\n                            }\n                        </Row>\n                        <Row>\n                            <Collapse open={this.state.collapse}>\n                                {this.state.pollResult.details[0] != null &&\n                                    <div><hr/>\n                                        <h5>Output</h5>\n                                        <p>{this.state.pollResult.details[0]}</p>\n                                    </div>\n                                }\n                                {typeof this.state.pollResult.details[1] != \"undefined\"  \n                                        && this.state.pollResult.details[1] != null  \n                                        && this.state.pollResult.details[1].length != null  \n                                        && this.state.pollResult.details[1].length > 0 &&\n                                    <div>\n                                        <h5>Graphs</h5>\n                                        {this.state.pollResult.details[1].map(path => (<img key={path} src={path} alt=\"Graph Plot\" />))}\n                                    </div>\n                                }\n                            </Collapse>\n                        </Row>\n                    </Container>\n                </CardBody>\n            </Card>\n\n        );\n    }\n}\n\nexport default ResultCard;","import React, { Component } from 'react';\nimport './App.css';\nimport FullNavBar from './components/navbar'\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\"\nimport { Container, Row } from \"shards-react\";\nimport UploadCard from './components/uploadCard'\nimport ResultCard from './components/resultCard'\nimport SimpleStorage from \"react-simple-storage\";\n\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      showResultCard: false,\n      files: []\n    }\n    this.updateMainState = this.updateMainState.bind(this);\n    this.delete = this.delete.bind(this);\n  }\n\n  updateMainState = (state) => {\n     console.log('Setting State:', state); \n     this.setState(state)\n    //  localStorage.setItem('files', JSON.stringify(state.files)) \n    }\n\n    delete(id){\n      this.setState(prevState => ({\n          files: prevState.files.filter(file => file.fileID !== id )\n      }));\n  }\n\n  render() {\n    console.log(\"Current main state\", this.state)\n    const resultCards = this.state.files.map(file => (\n      <div style={{ padding: \"2%\" }} key={file.fileID}>\n      <ResultCard jobDetails={file} key={file.fileID} _handleDelete={this.delete}/>\n      </div>\n    ));\n\n\n    return (\n      <div>\n\n        <FullNavBar />\n        <Container>\n          <Row style={{ justifyContent: \"center\", padding: \"2%\" }}>\n            <UploadCard updateMainState={this.updateMainState} />\n          </Row>\n          <Row style={{ justifyContent: \"center\", padding: \"2%\" }}>\n            <SimpleStorage parent={this} />\n            {\n              this.state.showResultCard &&\n              resultCards\n            }\n          </Row>\n\n        </Container>\n\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}